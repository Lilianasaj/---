import pandas as pd
import os
from concurrent.futures import ThreadPoolExecutor
import time


def process_csv(file):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        df = pd.read_csv(file)
        numeric_data = df.select_dtypes(include='number')

        stats = {
            'file': file,
            'rows': len(df),
            'columns': len(df.columns),
            'numeric_columns': len(numeric_data.columns),
            'means': numeric_data.mean().to_dict(),
            'max': numeric_data.max().to_dict(),
            'min': numeric_data.min().to_dict(),
            'memory_mb': df.memory_usage(deep=True).sum() / 1024 ** 2
        }
        return stats
    except Exception as e:
        return {'file': file, 'error': str(e)}


def main():
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ CSV —Ñ–∞–π–ª—ã
    csv_files = [f for f in os.listdir() if f.endswith('.csv')]

    if not csv_files:
        print("CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(csv_files)} CSV —Ñ–∞–π–ª–æ–≤...")
    start_time = time.time()

    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    with ThreadPoolExecutor(max_workers=min(4, len(csv_files))) as executor:
        results = list(executor.map(process_csv, csv_files))

    total_time = time.time() - start_time

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\n–†–ï–ó–£–õ–¨–¢–ê–¢–´ ({total_time:.2f} —Å–µ–∫):")
    for result in results:
        if 'error' not in result:
            print(f"{result['file']}: {result['rows']} —Å—Ç—Ä–æ–∫, "
                  f"{result['columns']} –∫–æ–ª–æ–Ω–æ–∫, {result['memory_mb']:.1f} MB")
            for col, mean_val in list(result['means'].items())[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏
                print(f"   üìà {col}: —Å—Ä={mean_val:.2f}, "
                      f"–º–∞–∫—Å={result['max'][col]:.2f}, –º–∏–Ω={result['min'][col]:.2f}")
        else:
            print(f"{result['file']}: {result['error']}")


if __name__ == "__main__":
    main()
